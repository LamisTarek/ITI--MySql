1. Insert new student and his score in exam in different subjects as transaction.

START TRANSACTION;

INSERT INTO students (email, address, gender, birthDate, firstName, lastName, track_id )
VALUES ('lamis@gmail.com', "Mansoura", 'F', "1999-8-21", "Lamis", "Tarek", 1);

SET @student_id = LAST_INSERT_ID();

INSERT INTO exam_results (student_id, subject_id, score)
VALUES (@student_id, 1, 88),
       (@student_id, 2, 90),
       (@student_id, 3, 95);

COMMIT;
---------------------------------------------------------------------------------

2. Display the date of exam as the following: day 'month name' year. 
SELECT DATE_FORMAT(exam_date, '%d %M %Y') AS formatted_exam_date FROM exam_results;
-----------------------------------------------------------------------------------

3. Display name and age of each students 
SELECT CONCAT(firstName, " ", lastName) As name, DATEDIFF(CURRENT_DATE(), birthDate)/365 AS age FROM students;

-----------------------------------------------------------------------------------

4. Display the name of students with their Rounded score in each Exam
SELECT student_name, subject_name, ROUND(score, 2) AS rounded_score FROM `student_score` WHERE 1;

---------------------------------------------------------------------------------------

 5. Display the name of students with the year of Birthdate
SELECT CONCAT(firstName, " ", lastName) As name, DATE_FORMAT(birthDate, '%Y') AS year FROM students;
-----------------------------------------------------------------------------

 6. Add new exam result, in date column use NOW
INSERT INTO exam_results(student_id, subject_id, score, exam_date) VALUES (1,1,80,NOW());

---------------------------------------------------------------------------------------------
 7. Create Hello world function which take username and return welcome message to user using his name
DELIMITER $$
CREATE FUNCTION hello_world(username VARCHAR(50))
RETURNS VARCHAR(100)
BEGIN
  DECLARE welcome_message VARCHAR(100);
  SET welcome_message = CONCAT('Welcome, ', username, '!');
  RETURN welcome_message;
END$$
DELIMITER ;

Select hello_world("Lamis");
-------------------------------------------------------------------------------------------------

 8. Create multiply function which take two number and return the multiply of them
DELIMITER $$
CREATE FUNCTION multiply(a INT, b INT)
RETURNS INT
BEGIN
  DECLARE result INT;
  SET result = a * b;
  RETURN result;
END$$
DELIMITER ;
--------------------------------------------------------------------------------
 9. Create function which takes student id and Exam id and return score the student in Exam.
DELIMITER $$
CREATE FUNCTION get_student_score(student_id INT, subject_id INT)
RETURNS INT
BEGIN
  DECLARE result INT;
  SELECT score INTO result FROM exam_results
  WHERE student_id = student_id AND subject_id = subject_id;
  RETURN result;
END$$
DELIMITER ;

select get_student_score(2, 2);
--------------------------------------------------------------------------
 10. Create function which takes Exam id and return the number of students who failed in a Exam (Score less than 50).
DELIMITER $$
CREATE FUNCTION count_failed_students(exam_id INT)
RETURNS INT
BEGIN
  DECLARE result INT;
  SELECT COUNT(*) INTO result FROM exam_results
  WHERE subject_id = exam_id AND score < 50;
  RETURN result;
END$$
DELIMITER ;

select count_failed_students(1);
--------------------------------------------------------------------
 11. Create function which take subject name and return the average of max grades for subject
DELIMITER $$
CREATE FUNCTION avg_max_grades(subject_name VARCHAR(255))
RETURNS FLOAT
BEGIN
  DECLARE result FLOAT;
  SELECT AVG(max_score) INTO result FROM (
    SELECT MAX(score) AS max_score FROM exam_results
    JOIN subjects ON exam_results.subject_id = subjects.id
    WHERE subjects.name = subject_name
    GROUP BY exam_results.student_id
  ) AS max_grades;
  RETURN result;
END$$
DELIMITER ;

select avg_max_grades("HTML");
---------------------------------------------------------------------------------------------
12. Create Table called Deleted_Students which will hold the deleted students info(same columns as in student tables)
 13. Create trigger to save the deleted student from Student table to Deleted_Students.

CREATE TABLE `Deleted_Students` (
  `id` int(11) NOT NULL,
  `email` varchar(50) NOT NULL,
  `address` varchar(255) NOT NULL,
  `gender` enum('male','female') NOT NULL,
  `birthDate` date DEFAULT NULL,
  `firstName` varchar(50) DEFAULT NULL,
  `lastName` varchar(50) DEFAULT NULL,
  `track_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DELIMITER $$
CREATE TRIGGER save_deleted_student
AFTER DELETE ON students
FOR EACH ROW
BEGIN
  INSERT INTO Deleted_Students (id, email, address, gender, birthDate, firstName, lastName, track_id)
  VALUES (OLD.id, OLD.email, OLD.address, OLD.gender, OLD.birthDate, OLD.firstName, OLD.lastName, OLD.track_id);
END$$
DELIMITER ;

---------------------------------------------------------------------------------

 14. Create trigger to save the newly added students to Student table to Backup_Students.
CREATE TABLE `Backup_Students` (
  `id` int(11) NOT NULL,
  `email` varchar(50) NOT NULL,
  `address` varchar(255) NOT NULL,
  `gender` enum('male','female') NOT NULL,
  `birth_date` date DEFAULT NULL,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `track_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

DELIMITER $$
CREATE TRIGGER save_new_student
AFTER INSERT ON students
FOR EACH ROW
BEGIN
  INSERT INTO Backup_Students (email, address, gender, birthDate, firstName, lastName, track_id)
  VALUES (NEW.email, NEW.address, NEW.gender, NEW.birthDate, NEW.firstName, NEW.lastName, NEW.track_id);
END$$
DELIMITER ;

 
